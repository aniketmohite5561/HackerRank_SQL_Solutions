1) Query all columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA.
  The CITY table is described as follows:

Solution:-
  SELECT * FROM CITY
  WHERE POPULATION >100000 AND COUNTRYCODE = 'USA';
--------------------------------------------------------------------------------------
2) Write a query to find the corresponding Western Longitude value for the greatest value of the Northern Latitudes less than 137.2345 up to 4 decimal places.

Solution:-
  SELECT ROUND(LONG_W,4) FROM STATION
  WHERE LAT_N = (SELECT MAX(LAT_N) FROM STATION WHERE LAT_N < 137.2345);
--------------------------------------------------------------------------------------
3) Query the smallest Northern Latitude (LAT_N) from STATION that is greater than 38.7780. Round your answer to 4 decimal places.

Solution:-
  SELECT ROUND(MIN(LAT_N),4) FROM STATION
  WHERE LAT_N > 38.7780;
--------------------------------------------------------------------------------------
4) Query the Western Longitude (LONG_W)where the smallest Northern Latitude (LAT_N) in STATION is greater than . Round your answer to 4 decimal places.

Solution:-
  SELECT ROUND(LONG_W,4) FROM STATION
  WHERE LAT_N= (SELECT MIN(LAT_N) FROM STATION WHERE LAT_N >38.7780);
--------------------------------------------------------------------------------------
5) Query a count of the number of cities in CITY having a Population larger than 100,000.

Solution:-
  SELECT COUNT(POPULATION) FROM CITY
  WHERE POPULATION > 100000;
--------------------------------------------------------------------------------------
6) Query the average population of all cities in CITY where District is California.

Solution:-
  SELECT AVG(POPULATION) FROM CITY
  WHERE DISTRICT = 'CALIFORNIA';
--------------------------------------------------------------------------------------
7) Query the average population for all cities in CITY, rounded down to the nearest integer.

Solution:-
  SELECT FLOOR(AVG(POPULATION)) FROM CITY;
--------------------------------------------------------------------------------------
8) Query the sum of the populations for all Japanese cities in CITY. The COUNTRYCODE for Japan is JPN.

Solution:-
  SELECT SUM(POPULATION) FROM CITY
  WHERE COUNTRYCODE='JPN';
--------------------------------------------------------------------------------------
9) Query the difference between the maximum and minimum populations in CITY.

Solution:-
SELECT (MAX(POPULATION)-MIN(POPULATION)) FROM CITY;
--------------------------------------------------------------------------------------
10)Consider P1(a,b) and P2(c,d) to be two points on a 2D plane.

 happens to equal the minimum value in Northern Latitude (LAT_N in STATION).
 happens to equal the minimum value in Western Longitude (LONG_W in STATION).
 happens to equal the maximum value in Northern Latitude (LAT_N in STATION).
 happens to equal the maximum value in Western Longitude (LONG_W in STATION).
Query the Manhattan Distance between points  and  and round it to a scale of  decimal places.

Solution:-

  SELECT ROUND((MAX(LAT_N) - MIN(LAT_N) + MAX(LONG_W) - MIN(LONG_W)), 4) 
  FROM STATION;
--------------------------------------------------------------------------------------
11) Consider P1(a,c) and P2(d,b) to be two points on a 2D plane where  are the respective minimum and maximum values of Northern Latitude (LAT_N) and  
are the respective minimum and maximum values of Western Longitude (LONG_W) in STATION.

Query the Euclidean Distance between points  and  and format your answer to display  decimal digits.

Solution:-

  SELECT ROUND(sqrt(power(MAX(LAT_N) - MIN(LAT_N),2) + power(MAX(LONG_W) - MIN(LONG_W),2)), 4) FROM STATION;
--------------------------------------------------------------------------------------
12)Write a query to print all prime numbers less than or equal to 1000. Print your result on a single line, and use the ampersand () character as your separator (instead of a space).

For example, the output for all prime numbers <=10 would be: 2&3&5&7

Solution:-

    SELECT GROUP_CONCAT(NUMB SEPARATOR '&')
    FROM (
    SELECT @num:=@num+1 as NUMB FROM
    information_schema.tables t1,
    information_schema.tables t2,
    (SELECT @num:=1) tmp
    ) tempNum
    WHERE NUMB<=1000 AND NOT EXISTS(
    SELECT * FROM (
    SELECT @nu:=@nu+1 as NUMA FROM
    information_schema.tables t1,
    information_schema.tables t2,
    (SELECT @nu:=1) tmp1
    LIMIT 1000) tatata
    WHERE FLOOR(NUMB/NUMA)=(NUMB/NUMA) AND NUMA<NUMB AND NUMA>1)

--------------------------------------------------------------------------------------
